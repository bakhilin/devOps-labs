"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StateMock = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = require("lodash");

var _react = require("react");

// `state` prop must be an object, as does React component state.
// "The state is user-defined, and it should be a plain JavaScript object."
// https://reactjs.org/docs/react-component.html#state
var StateMock =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(StateMock, _Component);

  function StateMock() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, StateMock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(StateMock)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "childRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleRef", function (childRef) {
      var prevRef = _this.props.children.ref;
      _this.childRef = childRef;

      if (!childRef) {
        handleRef(prevRef, childRef); // Nothing else to do on the unmount branch (when refs are set to NULL)

        return;
      }

      if (_this.props.state) {
        // Wait until state has been set to call prev ref. This will give the
        // impression that the mocked state is the initial state.
        replaceState(childRef, _this.props.state, function () {
          handleRef(prevRef, childRef);
        });
      } else {
        handleRef(prevRef, childRef);
      }
    });
    return _this;
  }

  (0, _createClass2.default)(StateMock, [{
    key: "render",
    value: function render() {
      var children = this.props.children; // Flow users will get a static error when trying to wrap more elements with
      // StateMock. Others might bypass this limitation and find out at run time.

      if (Array.isArray(children)) {
        throw new Error('StateMock only accepts a single child element');
      }

      return (0, _react.cloneElement)(children, {
        ref: this.handleRef
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var childRef = this.childRef;
      var state = this.props.state;

      if (!childRef) {
        throw new Error('childRef missing in StateMock.componentDidUpdate');
      }

      if (state && !(0, _lodash.isEqual)(state, prevProps.state)) {
        replaceState(childRef, state);
      }
    }
  }]);
  return StateMock;
}(_react.Component);

exports.StateMock = StateMock;
(0, _defineProperty2.default)(StateMock, "cosmosCapture", false);

function replaceState(childRef, state, cb) {
  // We need to unset existing state keys because React doesn't provide a
  // replaceState method (anymore)
  // https://reactjs.org/docs/react-component.html#setstate
  var nextState = resetOriginalKeys(childRef.state, state);

  if (!(0, _lodash.isEqual)(nextState, childRef.state)) {
    childRef.setState(nextState, cb);
  }
}

function resetOriginalKeys(original, current) {
  var keys = Object.keys;
  return keys(original).reduce(function (result, key) {
    return keys(result).indexOf(key) === -1 ? (0, _objectSpread3.default)({}, result, (0, _defineProperty2.default)({}, key, undefined)) : result;
  }, current);
}

function handleRef(ref, elRef) {
  if (typeof ref === 'string') {
    throw new Error('StateMock does not support string refs');
  } // https://reactjs.org/docs/refs-and-the-dom.html#creating-refs


  if (typeof ref === 'function') {
    ref(elRef);
  } else if (ref && (0, _typeof2.default)(ref) === 'object') {
    ref.current = elRef;
  }
}