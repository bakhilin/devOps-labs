{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport safelyParseJson from './safelyParseJson';\nimport isClient from './isClient';\nimport isAPISupported from './isAPISupported';\nimport isDevelopment from './isDevelopment';\n/**\n * An utility to quickly create hooks to access both Session Storage and Local Storage\n */\n\nconst createStorageHook = type => {\n  const storageName = `${type}Storage`;\n\n  if (isClient && !isAPISupported(storageName)) {\n    // eslint-disable-next-line no-console\n    console.warn(`${storageName} is not supported`);\n  }\n  /**\n   * the hook\n   */\n\n\n  return (storageKey, defaultValue) => {\n    if (!isClient) {\n      if (isDevelopment) {\n        // eslint-disable-next-line no-console\n        console.warn(`Please be aware that ${storageName} could not be available during SSR`);\n      }\n\n      return [JSON.stringify(defaultValue), () => undefined];\n    }\n\n    const storage = window[storageName];\n    const [value, setValue] = useState(safelyParseJson(storage.getItem(storageKey) || JSON.stringify(defaultValue)));\n    useEffect(() => {\n      storage.setItem(storageKey, JSON.stringify(value));\n    }, [storageKey, value]);\n    return [value, setValue];\n  };\n};\n\nexport default createStorageHook;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/shared/createStorageHook.js"],"names":["useEffect","useState","safelyParseJson","isClient","isAPISupported","isDevelopment","createStorageHook","type","storageName","console","warn","storageKey","defaultValue","JSON","stringify","undefined","storage","window","value","setValue","getItem","setItem"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAIC,IAAD,IAAU;AAChC,QAAMC,WAAW,GAAI,GAAED,IAAK,SAA5B;;AACA,MAAIJ,QAAQ,IAAI,CAACC,cAAc,CAACI,WAAD,CAA/B,EAA8C;AAC1C;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAc,GAAEF,WAAY,mBAA5B;AACH;AACD;AACJ;AACA;;;AACI,SAAO,CAACG,UAAD,EAAaC,YAAb,KAA8B;AACjC,QAAI,CAACT,QAAL,EAAe;AACX,UAAIE,aAAJ,EAAmB;AACf;AACAI,QAAAA,OAAO,CAACC,IAAR,CAAc,wBAAuBF,WAAY,oCAAjD;AACH;;AACD,aAAO,CAACK,IAAI,CAACC,SAAL,CAAeF,YAAf,CAAD,EAA+B,MAAMG,SAArC,CAAP;AACH;;AACD,UAAMC,OAAO,GAAGC,MAAM,CAACT,WAAD,CAAtB;AACA,UAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAACC,eAAe,CAACc,OAAO,CAACI,OAAR,CAAgBT,UAAhB,KAA+BE,IAAI,CAACC,SAAL,CAAeF,YAAf,CAAhC,CAAhB,CAAlC;AACAZ,IAAAA,SAAS,CAAC,MAAM;AACZgB,MAAAA,OAAO,CAACK,OAAR,CAAgBV,UAAhB,EAA4BE,IAAI,CAACC,SAAL,CAAeI,KAAf,CAA5B;AACH,KAFQ,EAEN,CAACP,UAAD,EAAaO,KAAb,CAFM,CAAT;AAGA,WAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACH,GAdD;AAeH,CAxBD;;AAyBA,eAAeb,iBAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport safelyParseJson from './safelyParseJson';\nimport isClient from './isClient';\nimport isAPISupported from './isAPISupported';\nimport isDevelopment from './isDevelopment';\n/**\n * An utility to quickly create hooks to access both Session Storage and Local Storage\n */\nconst createStorageHook = (type) => {\n    const storageName = `${type}Storage`;\n    if (isClient && !isAPISupported(storageName)) {\n        // eslint-disable-next-line no-console\n        console.warn(`${storageName} is not supported`);\n    }\n    /**\n     * the hook\n     */\n    return (storageKey, defaultValue) => {\n        if (!isClient) {\n            if (isDevelopment) {\n                // eslint-disable-next-line no-console\n                console.warn(`Please be aware that ${storageName} could not be available during SSR`);\n            }\n            return [JSON.stringify(defaultValue), () => undefined];\n        }\n        const storage = window[storageName];\n        const [value, setValue] = useState(safelyParseJson(storage.getItem(storageKey) || JSON.stringify(defaultValue)));\n        useEffect(() => {\n            storage.setItem(storageKey, JSON.stringify(value));\n        }, [storageKey, value]);\n        return [value, setValue];\n    };\n};\nexport default createStorageHook;\n"]},"metadata":{},"sourceType":"module"}