{"ast":null,"code":"import { useEffect } from 'react';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\n\nconst assignDragEventOnMount = (targetRef, handlerRef, eventName) => {\n  useEffect(() => {\n    const cb = dragEvent => {\n      if (handlerRef && handlerRef.current) {\n        handlerRef.current(dragEvent);\n      }\n    };\n\n    if (targetRef.current) {\n      targetRef.current.addEventListener(eventName, cb);\n    }\n\n    return () => {\n      if (targetRef.current) {\n        targetRef.current.removeEventListener(eventName, cb);\n      }\n    };\n  }, []);\n};\n/**\n * Returns an object of callback setters to handle the drag-related events.\n * It accepts a DOM ref representing the events target (where attach the events to).\n *\n * Returned callback setters: `onDrag`, `onDrop`, `onDragEnter`, `onDragEnd`, `onDragExit`, `onDragLeave`,\n * `onDragOver`, `onDragStart`;\n */\n\n\nconst useDragEvents = function (targetRef) {\n  let setDraggable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const [onDrag, setOnDrag] = useHandlerSetterRef();\n  const [onDrop, setOnDrop] = useHandlerSetterRef();\n  const [onDragEnter, setOnDragEnter] = useHandlerSetterRef();\n  const [onDragEnd, setOnDragEnd] = useHandlerSetterRef();\n  const [onDragExit, setOnDragExit] = useHandlerSetterRef();\n  const [onDragLeave, setOnDragLeave] = useHandlerSetterRef();\n  const [onDragOver, setOnDragOver] = useHandlerSetterRef();\n  const [onDragStart, setOnDragStart] = useHandlerSetterRef();\n\n  if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n    return createCbSetterErrorProxy('Unable to assign any drag event to the given ref');\n  }\n\n  useEffect(() => {\n    if (setDraggable && targetRef.current && !targetRef.current.hasAttribute('draggable')) {\n      targetRef.current.setAttribute('draggable', String(true));\n    }\n  }, []);\n  assignDragEventOnMount(targetRef, onDrag, 'drag');\n  assignDragEventOnMount(targetRef, onDrop, 'drop');\n  assignDragEventOnMount(targetRef, onDragEnter, 'dragenter');\n  assignDragEventOnMount(targetRef, onDragEnd, 'dragend');\n  assignDragEventOnMount(targetRef, onDragExit, 'dragexit');\n  assignDragEventOnMount(targetRef, onDragLeave, 'dragleave');\n  assignDragEventOnMount(targetRef, onDragOver, 'dragover');\n  assignDragEventOnMount(targetRef, onDragStart, 'dragstart');\n  return Object.freeze({\n    onDrag: setOnDrag,\n    onDrop: setOnDrop,\n    onDragEnter: setOnDragEnter,\n    onDragEnd: setOnDragEnd,\n    onDragExit: setOnDragExit,\n    onDragLeave: setOnDragLeave,\n    onDragOver: setOnDragOver,\n    onDragStart: setOnDragStart\n  });\n};\n\nexport default useDragEvents;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useDragEvents.js"],"names":["useEffect","safeHasOwnProperty","createCbSetterErrorProxy","useHandlerSetterRef","assignDragEventOnMount","targetRef","handlerRef","eventName","cb","dragEvent","current","addEventListener","removeEventListener","useDragEvents","setDraggable","onDrag","setOnDrag","onDrop","setOnDrop","onDragEnter","setOnDragEnter","onDragEnd","setOnDragEnd","onDragExit","setOnDragExit","onDragLeave","setOnDragLeave","onDragOver","setOnDragOver","onDragStart","setOnDragStart","hasAttribute","setAttribute","String","Object","freeze"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nconst assignDragEventOnMount = (targetRef, handlerRef, eventName) => {\n    useEffect(() => {\n        const cb = (dragEvent) => {\n            if (handlerRef && handlerRef.current) {\n                handlerRef.current(dragEvent);\n            }\n        };\n        if (targetRef.current) {\n            targetRef.current.addEventListener(eventName, cb);\n        }\n        return () => {\n            if (targetRef.current) {\n                targetRef.current.removeEventListener(eventName, cb);\n            }\n        };\n    }, []);\n};\n/**\n * Returns an object of callback setters to handle the drag-related events.\n * It accepts a DOM ref representing the events target (where attach the events to).\n *\n * Returned callback setters: `onDrag`, `onDrop`, `onDragEnter`, `onDragEnd`, `onDragExit`, `onDragLeave`,\n * `onDragOver`, `onDragStart`;\n */\nconst useDragEvents = (targetRef, setDraggable = true) => {\n    const [onDrag, setOnDrag] = useHandlerSetterRef();\n    const [onDrop, setOnDrop] = useHandlerSetterRef();\n    const [onDragEnter, setOnDragEnter] = useHandlerSetterRef();\n    const [onDragEnd, setOnDragEnd] = useHandlerSetterRef();\n    const [onDragExit, setOnDragExit] = useHandlerSetterRef();\n    const [onDragLeave, setOnDragLeave] = useHandlerSetterRef();\n    const [onDragOver, setOnDragOver] = useHandlerSetterRef();\n    const [onDragStart, setOnDragStart] = useHandlerSetterRef();\n    if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n        return createCbSetterErrorProxy('Unable to assign any drag event to the given ref');\n    }\n    useEffect(() => {\n        if (setDraggable && targetRef.current && !targetRef.current.hasAttribute('draggable')) {\n            targetRef.current.setAttribute('draggable', String(true));\n        }\n    }, []);\n    assignDragEventOnMount(targetRef, onDrag, 'drag');\n    assignDragEventOnMount(targetRef, onDrop, 'drop');\n    assignDragEventOnMount(targetRef, onDragEnter, 'dragenter');\n    assignDragEventOnMount(targetRef, onDragEnd, 'dragend');\n    assignDragEventOnMount(targetRef, onDragExit, 'dragexit');\n    assignDragEventOnMount(targetRef, onDragLeave, 'dragleave');\n    assignDragEventOnMount(targetRef, onDragOver, 'dragover');\n    assignDragEventOnMount(targetRef, onDragStart, 'dragstart');\n    return Object.freeze({\n        onDrag: setOnDrag,\n        onDrop: setOnDrop,\n        onDragEnter: setOnDragEnter,\n        onDragEnd: setOnDragEnd,\n        onDragExit: setOnDragExit,\n        onDragLeave: setOnDragLeave,\n        onDragOver: setOnDragOver,\n        onDragStart: setOnDragStart,\n    });\n};\nexport default useDragEvents;\n"]},"metadata":{},"sourceType":"module"}