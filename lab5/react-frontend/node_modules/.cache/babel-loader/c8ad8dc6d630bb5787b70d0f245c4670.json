{"ast":null,"code":"import { useState } from 'react';\nimport useGlobalEvent from './useGlobalEvent';\n/**\n * Uses the [Navigator online API](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine) to define\n * whether the browser is connected or not.\n */\n\nconst useOnlineState = () => {\n  /**\n   * If the browser doesn't support the `navigator.onLine` state, the hook will always return true\n   * assuming the app is already online.\n   */\n  const isSupported = typeof window !== 'undefined' && 'ononline' in window;\n  const [isOnline, setIsOnline] = useState(isSupported ? navigator.onLine : true);\n  const whenOnline = useGlobalEvent('online', undefined, {\n    capture: true\n  });\n  const whenOffline = useGlobalEvent('offline', undefined, {\n    capture: true\n  });\n\n  if (!isSupported) {\n    // eslint-disable-next-line max-len, no-console\n    console.warn('The current device does not support the \\'online/offline\\' events, you should avoid using useOnlineState');\n    return isOnline;\n  }\n\n  whenOnline(() => {\n    setIsOnline(true);\n  });\n  whenOffline(() => {\n    setIsOnline(false);\n  });\n  return isOnline;\n};\n\nexport default useOnlineState;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useOnlineState.js"],"names":["useState","useGlobalEvent","useOnlineState","isSupported","window","isOnline","setIsOnline","navigator","onLine","whenOnline","undefined","capture","whenOffline","console","warn"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACJ;AACA;AACA;AACI,QAAMC,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,cAAcA,MAAnE;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAACG,WAAW,GAAGI,SAAS,CAACC,MAAb,GAAsB,IAAlC,CAAxC;AACA,QAAMC,UAAU,GAAGR,cAAc,CAAC,QAAD,EAAWS,SAAX,EAAsB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAtB,CAAjC;AACA,QAAMC,WAAW,GAAGX,cAAc,CAAC,SAAD,EAAYS,SAAZ,EAAuB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAvB,CAAlC;;AACA,MAAI,CAACR,WAAL,EAAkB;AACd;AACAU,IAAAA,OAAO,CAACC,IAAR,CAAa,0GAAb;AACA,WAAOT,QAAP;AACH;;AACDI,EAAAA,UAAU,CAAC,MAAM;AACbH,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAFS,CAAV;AAGAM,EAAAA,WAAW,CAAC,MAAM;AACdN,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFU,CAAX;AAGA,SAAOD,QAAP;AACH,CArBD;;AAsBA,eAAeH,cAAf","sourcesContent":["import { useState } from 'react';\nimport useGlobalEvent from './useGlobalEvent';\n/**\n * Uses the [Navigator online API](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine) to define\n * whether the browser is connected or not.\n */\nconst useOnlineState = () => {\n    /**\n     * If the browser doesn't support the `navigator.onLine` state, the hook will always return true\n     * assuming the app is already online.\n     */\n    const isSupported = typeof window !== 'undefined' && 'ononline' in window;\n    const [isOnline, setIsOnline] = useState(isSupported ? navigator.onLine : true);\n    const whenOnline = useGlobalEvent('online', undefined, { capture: true });\n    const whenOffline = useGlobalEvent('offline', undefined, { capture: true });\n    if (!isSupported) {\n        // eslint-disable-next-line max-len, no-console\n        console.warn('The current device does not support the \\'online/offline\\' events, you should avoid using useOnlineState');\n        return isOnline;\n    }\n    whenOnline(() => {\n        setIsOnline(true);\n    });\n    whenOffline(() => {\n        setIsOnline(false);\n    });\n    return isOnline;\n};\nexport default useOnlineState;\n"]},"metadata":{},"sourceType":"module"}