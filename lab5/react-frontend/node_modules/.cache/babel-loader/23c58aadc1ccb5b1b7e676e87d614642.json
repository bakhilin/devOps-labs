{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nconst errorMessage = 'matchMedia is not supported, this could happen both because window.matchMedia is not supported by' + ' your current browser or you\\'re using the useMediaQuery hook whilst server side rendering.';\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n */\n\nconst useMediaQuery = mediaQuery => {\n  if (!isClient || !isAPISupported('matchMedia')) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n    return null;\n  }\n\n  const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(mediaQuery);\n\n    const documentChangeHandler = () => setIsVerified(!!mediaQueryList.matches);\n\n    try {\n      mediaQueryList.addEventListener('change', documentChangeHandler);\n    } catch (e) {\n      // Safari isn't supporting mediaQueryList.addEventListener\n      mediaQueryList.addListener(documentChangeHandler);\n    }\n\n    documentChangeHandler();\n    return () => {\n      try {\n        mediaQueryList.removeEventListener('change', documentChangeHandler);\n      } catch (e) {\n        // Safari isn't supporting mediaQueryList.removeEventListener\n        mediaQueryList.removeListener(documentChangeHandler);\n      }\n    };\n  }, [mediaQuery]);\n  return isVerified;\n};\n\nexport default useMediaQuery;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useMediaQuery.js"],"names":["useEffect","useState","isClient","isAPISupported","errorMessage","useMediaQuery","mediaQuery","console","warn","isVerified","setIsVerified","window","matchMedia","matches","mediaQueryList","documentChangeHandler","addEventListener","e","addListener","removeEventListener","removeListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,MAAMC,YAAY,GAAG,sGACf,6FADN;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAIC,UAAD,IAAgB;AAClC,MAAI,CAACJ,QAAD,IAAa,CAACC,cAAc,CAAC,YAAD,CAAhC,EAAgD;AAC5C;AACAI,IAAAA,OAAO,CAACC,IAAR,CAAaJ,YAAb;AACA,WAAO,IAAP;AACH;;AACD,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,CAAC,CAACU,MAAM,CAACC,UAAP,CAAkBN,UAAlB,EAA8BO,OAAjC,CAA5C;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,cAAc,GAAGH,MAAM,CAACC,UAAP,CAAkBN,UAAlB,CAAvB;;AACA,UAAMS,qBAAqB,GAAG,MAAML,aAAa,CAAC,CAAC,CAACI,cAAc,CAACD,OAAlB,CAAjD;;AACA,QAAI;AACAC,MAAAA,cAAc,CAACE,gBAAf,CAAgC,QAAhC,EAA0CD,qBAA1C;AACH,KAFD,CAGA,OAAOE,CAAP,EAAU;AACN;AACAH,MAAAA,cAAc,CAACI,WAAf,CAA2BH,qBAA3B;AACH;;AACDA,IAAAA,qBAAqB;AACrB,WAAO,MAAM;AACT,UAAI;AACAD,QAAAA,cAAc,CAACK,mBAAf,CAAmC,QAAnC,EAA6CJ,qBAA7C;AACH,OAFD,CAGA,OAAOE,CAAP,EAAU;AACN;AACAH,QAAAA,cAAc,CAACM,cAAf,CAA8BL,qBAA9B;AACH;AACJ,KARD;AASH,GApBQ,EAoBN,CAACT,UAAD,CApBM,CAAT;AAqBA,SAAOG,UAAP;AACH,CA7BD;;AA8BA,eAAeJ,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nconst errorMessage = 'matchMedia is not supported, this could happen both because window.matchMedia is not supported by'\n    + ' your current browser or you\\'re using the useMediaQuery hook whilst server side rendering.';\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n */\nconst useMediaQuery = (mediaQuery) => {\n    if (!isClient || !isAPISupported('matchMedia')) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n        return null;\n    }\n    const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n    useEffect(() => {\n        const mediaQueryList = window.matchMedia(mediaQuery);\n        const documentChangeHandler = () => setIsVerified(!!mediaQueryList.matches);\n        try {\n            mediaQueryList.addEventListener('change', documentChangeHandler);\n        }\n        catch (e) {\n            // Safari isn't supporting mediaQueryList.addEventListener\n            mediaQueryList.addListener(documentChangeHandler);\n        }\n        documentChangeHandler();\n        return () => {\n            try {\n                mediaQueryList.removeEventListener('change', documentChangeHandler);\n            }\n            catch (e) {\n                // Safari isn't supporting mediaQueryList.removeEventListener\n                mediaQueryList.removeListener(documentChangeHandler);\n            }\n        };\n    }, [mediaQuery]);\n    return isVerified;\n};\nexport default useMediaQuery;\n"]},"metadata":{},"sourceType":"module"}