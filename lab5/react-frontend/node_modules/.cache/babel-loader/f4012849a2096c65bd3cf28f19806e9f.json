{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport isApiSupported from './shared/isAPISupported';\nimport isClient from './shared/isClient'; // eslint-disable-next-line max-len\n\nconst errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\\'re using the useResizeObserver hook whilst server side rendering.';\n/**\n * Uses the ResizeObserver API to observe changes within the given HTML Element DOM Rect.\n * @param elementRef\n * @param debounceTimeout\n * @returns {undefined}\n */\n\nconst useResizeObserver = function (elementRef) {\n  let debounceTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  const isSupported = isApiSupported('ResizeObserver');\n  const observerRef = useRef(null);\n  const [DOMRect, setDOMRect] = useState();\n\n  if (isClient && !isSupported) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n  } // creates the observer reference on mount\n\n\n  useEffect(() => {\n    if (isSupported) {\n      const fn = debounce(entries => {\n        const {\n          bottom,\n          height,\n          left,\n          right,\n          top,\n          width\n        } = entries[0].contentRect;\n        setDOMRect({\n          bottom,\n          height,\n          left,\n          right,\n          top,\n          width\n        });\n      }, debounceTimeout);\n      observerRef.current = new ResizeObserver(fn);\n      return () => {\n        var _a;\n\n        fn.cancel();\n        (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n      };\n    }\n\n    return () => {};\n  }, []); // observes on the provided element ref\n\n  useEffect(() => {\n    var _a;\n\n    if (isSupported && elementRef.current) {\n      (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.observe(elementRef.current);\n    }\n  }, [elementRef.current]);\n  return DOMRect;\n};\n\nexport default useResizeObserver;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useResizeObserver.js"],"names":["useEffect","useRef","useState","debounce","isApiSupported","isClient","errorMessage","useResizeObserver","elementRef","debounceTimeout","isSupported","observerRef","DOMRect","setDOMRect","console","warn","fn","entries","bottom","height","left","right","top","width","contentRect","current","ResizeObserver","_a","cancel","disconnect","observe"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;;AACA,MAAMC,YAAY,GAAG,0MAArB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,UAACC,UAAD,EAAuC;AAAA,MAA1BC,eAA0B,uEAAR,GAAQ;AAC7D,QAAMC,WAAW,GAAGN,cAAc,CAAC,gBAAD,CAAlC;AACA,QAAMO,WAAW,GAAGV,MAAM,CAAC,IAAD,CAA1B;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;;AACA,MAAIG,QAAQ,IAAI,CAACK,WAAjB,EAA8B;AAC1B;AACAI,IAAAA,OAAO,CAACC,IAAR,CAAaT,YAAb;AACH,GAP4D,CAQ7D;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,WAAJ,EAAiB;AACb,YAAMM,EAAE,GAAGb,QAAQ,CAAEc,OAAD,IAAa;AAC7B,cAAM;AAAEC,UAAAA,MAAF;AAAUC,UAAAA,MAAV;AAAkBC,UAAAA,IAAlB;AAAwBC,UAAAA,KAAxB;AAA+BC,UAAAA,GAA/B;AAAoCC,UAAAA;AAApC,YAA8CN,OAAO,CAAC,CAAD,CAAP,CAAWO,WAA/D;AACAX,QAAAA,UAAU,CAAC;AAAEK,UAAAA,MAAF;AAAUC,UAAAA,MAAV;AAAkBC,UAAAA,IAAlB;AAAwBC,UAAAA,KAAxB;AAA+BC,UAAAA,GAA/B;AAAoCC,UAAAA;AAApC,SAAD,CAAV;AACH,OAHkB,EAGhBd,eAHgB,CAAnB;AAIAE,MAAAA,WAAW,CAACc,OAAZ,GAAsB,IAAIC,cAAJ,CAAmBV,EAAnB,CAAtB;AACA,aAAO,MAAM;AACT,YAAIW,EAAJ;;AACAX,QAAAA,EAAE,CAACY,MAAH;AACA,SAACD,EAAE,GAAGhB,WAAW,CAACc,OAAlB,MAA+B,IAA/B,IAAuCE,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACE,UAAH,EAAhE;AACH,OAJD;AAKH;;AACD,WAAO,MAAM,CACZ,CADD;AAEH,GAfQ,EAeN,EAfM,CAAT,CAT6D,CAyB7D;;AACA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,EAAJ;;AACA,QAAIjB,WAAW,IAAIF,UAAU,CAACiB,OAA9B,EAAuC;AACnC,OAACE,EAAE,GAAGhB,WAAW,CAACc,OAAlB,MAA+B,IAA/B,IAAuCE,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACG,OAAH,CAAWtB,UAAU,CAACiB,OAAtB,CAAhE;AACH;AACJ,GALQ,EAKN,CAACjB,UAAU,CAACiB,OAAZ,CALM,CAAT;AAMA,SAAOb,OAAP;AACH,CAjCD;;AAkCA,eAAeL,iBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport isApiSupported from './shared/isAPISupported';\nimport isClient from './shared/isClient';\n// eslint-disable-next-line max-len\nconst errorMessage = 'ResizeObserver is not supported, this could happen both because window.ResizeObserver is not supported by your current browser or you\\'re using the useResizeObserver hook whilst server side rendering.';\n/**\n * Uses the ResizeObserver API to observe changes within the given HTML Element DOM Rect.\n * @param elementRef\n * @param debounceTimeout\n * @returns {undefined}\n */\nconst useResizeObserver = (elementRef, debounceTimeout = 100) => {\n    const isSupported = isApiSupported('ResizeObserver');\n    const observerRef = useRef(null);\n    const [DOMRect, setDOMRect] = useState();\n    if (isClient && !isSupported) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n    }\n    // creates the observer reference on mount\n    useEffect(() => {\n        if (isSupported) {\n            const fn = debounce((entries) => {\n                const { bottom, height, left, right, top, width } = entries[0].contentRect;\n                setDOMRect({ bottom, height, left, right, top, width });\n            }, debounceTimeout);\n            observerRef.current = new ResizeObserver(fn);\n            return () => {\n                var _a;\n                fn.cancel();\n                (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n            };\n        }\n        return () => {\n        };\n    }, []);\n    // observes on the provided element ref\n    useEffect(() => {\n        var _a;\n        if (isSupported && elementRef.current) {\n            (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.observe(elementRef.current);\n        }\n    }, [elementRef.current]);\n    return DOMRect;\n};\nexport default useResizeObserver;\n"]},"metadata":{},"sourceType":"module"}