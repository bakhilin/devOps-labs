{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\n/**\n * Returns a frozen object of callback setters to handle the geolocation events.<br/>\n * So far, the supported methods are: `onChange`, invoked when the position changes and `onError`, invoked when\n * an error occur while retrieving the position.<br/>\n * The returned object also contains the `isSupported` boolean flag reporting whether the geolocation API is supported.\n */\n\nconst useGeolocationEvents = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions;\n  const watchId = useRef();\n  const [onChangeRef, setOnChangeRef] = useHandlerSetterRef();\n  const [onErrorRef, setOnErrorRef] = useHandlerSetterRef();\n  const isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;\n  useEffect(() => {\n    const onSuccess = successEvent => {\n      if (onChangeRef.current) {\n        onChangeRef.current(successEvent);\n      }\n    };\n\n    const onError = err => {\n      if (onErrorRef.current) {\n        onErrorRef.current(err);\n      }\n    };\n\n    if (isSupported) {\n      watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);\n    }\n\n    return () => {\n      if (isSupported) {\n        window.navigator.geolocation.clearWatch(watchId.current);\n      }\n    };\n  }, []);\n  return !isSupported ? createCbSetterErrorProxy('The Geolocation API is not supported') : Object.freeze({\n    isSupported,\n    onChange: setOnChangeRef,\n    onError: setOnErrorRef\n  });\n};\n\nexport default useGeolocationEvents;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useGeolocationEvents.js"],"names":["useEffect","useRef","useHandlerSetterRef","createCbSetterErrorProxy","geolocationStandardOptions","useGeolocationEvents","options","watchId","onChangeRef","setOnChangeRef","onErrorRef","setOnErrorRef","isSupported","window","navigator","onSuccess","successEvent","current","onError","err","geolocation","watchPosition","clearWatch","Object","freeze","onChange"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,wBAAP,MAAqC,mCAArC;AACA,OAAOC,0BAAP,MAAuC,qCAAvC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,YAA0C;AAAA,MAAzCC,OAAyC,uEAA/BF,0BAA+B;AACnE,QAAMG,OAAO,GAAGN,MAAM,EAAtB;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCP,mBAAmB,EAAzD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,mBAAmB,EAAvD;AACA,QAAMU,WAAW,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,iBAAiBA,MAAM,CAACC,SAA7E;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,SAAS,GAAIC,YAAD,IAAkB;AAChC,UAAIR,WAAW,CAACS,OAAhB,EAAyB;AACrBT,QAAAA,WAAW,CAACS,OAAZ,CAAoBD,YAApB;AACH;AACJ,KAJD;;AAKA,UAAME,OAAO,GAAIC,GAAD,IAAS;AACrB,UAAIT,UAAU,CAACO,OAAf,EAAwB;AACpBP,QAAAA,UAAU,CAACO,OAAX,CAAmBE,GAAnB;AACH;AACJ,KAJD;;AAKA,QAAIP,WAAJ,EAAiB;AACbL,MAAAA,OAAO,CAACU,OAAR,GAAkBJ,MAAM,CAACC,SAAP,CAAiBM,WAAjB,CAA6BC,aAA7B,CAA2CN,SAA3C,EAAsDG,OAAtD,EAA+DZ,OAA/D,CAAlB;AACH;;AACD,WAAO,MAAM;AACT,UAAIM,WAAJ,EAAiB;AACbC,QAAAA,MAAM,CAACC,SAAP,CAAiBM,WAAjB,CAA6BE,UAA7B,CAAwCf,OAAO,CAACU,OAAhD;AACH;AACJ,KAJD;AAKH,GAnBQ,EAmBN,EAnBM,CAAT;AAoBA,SAAO,CAACL,WAAD,GAAeT,wBAAwB,CAAC,sCAAD,CAAvC,GAAkFoB,MAAM,CAACC,MAAP,CAAc;AACnGZ,IAAAA,WADmG;AAEnGa,IAAAA,QAAQ,EAAEhB,cAFyF;AAGnGS,IAAAA,OAAO,EAAEP;AAH0F,GAAd,CAAzF;AAKH,CA9BD;;AA+BA,eAAeN,oBAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\n/**\n * Returns a frozen object of callback setters to handle the geolocation events.<br/>\n * So far, the supported methods are: `onChange`, invoked when the position changes and `onError`, invoked when\n * an error occur while retrieving the position.<br/>\n * The returned object also contains the `isSupported` boolean flag reporting whether the geolocation API is supported.\n */\nconst useGeolocationEvents = (options = geolocationStandardOptions) => {\n    const watchId = useRef();\n    const [onChangeRef, setOnChangeRef] = useHandlerSetterRef();\n    const [onErrorRef, setOnErrorRef] = useHandlerSetterRef();\n    const isSupported = typeof window !== 'undefined' && 'geolocation' in window.navigator;\n    useEffect(() => {\n        const onSuccess = (successEvent) => {\n            if (onChangeRef.current) {\n                onChangeRef.current(successEvent);\n            }\n        };\n        const onError = (err) => {\n            if (onErrorRef.current) {\n                onErrorRef.current(err);\n            }\n        };\n        if (isSupported) {\n            watchId.current = window.navigator.geolocation.watchPosition(onSuccess, onError, options);\n        }\n        return () => {\n            if (isSupported) {\n                window.navigator.geolocation.clearWatch(watchId.current);\n            }\n        };\n    }, []);\n    return !isSupported ? createCbSetterErrorProxy('The Geolocation API is not supported') : Object.freeze({\n        isSupported,\n        onChange: setOnChangeRef,\n        onError: setOnErrorRef,\n    });\n};\nexport default useGeolocationEvents;\n"]},"metadata":{},"sourceType":"module"}