{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nconst defaultOptions = {\n  increment: 1,\n  startAt: 0,\n  finishAt: 100\n};\nconst errorMessage = 'requestAnimationFrame is not supported, this could happen both because ' + 'window.requestAnimationFrame is not supported by your current browser version or you\\'re using the ' + 'useRequestAnimationFrame hook whilst server side rendering.';\n/**\n * Takes care of running an animating function, provided as the first argument, while keeping track of its progress.\n */\n\nconst useRequestAnimationFrame = function (func) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n\n  if (!isClient || !isAPISupported('requestAnimationFrame')) {\n    // eslint-disable-next-line no-console\n    console.warn(errorMessage);\n    return createCbSetterErrorProxy(errorMessage);\n  }\n\n  const opts = Object.assign(Object.assign({}, defaultOptions), options);\n  const progress = useRef(opts.startAt);\n  const [onFinish, setOnFinish] = useHandlerSetterRef(); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n  const next = () => window.requestAnimationFrame(step);\n\n  const step = useCallback(() => {\n    if (progress.current <= opts.finishAt || opts.finishAt === -1) {\n      func(progress.current, next);\n      progress.current += opts.increment;\n    } else if (onFinish.current) {\n      onFinish.current();\n    }\n  }, [func, opts.finishAt, opts.increment, progress.current, onFinish]);\n\n  if (progress.current <= opts.startAt) {\n    next();\n  }\n\n  return setOnFinish;\n};\n\nexport default useRequestAnimationFrame;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useRequestAnimationFrame.js"],"names":["useCallback","useRef","useHandlerSetterRef","isClient","isAPISupported","createCbSetterErrorProxy","defaultOptions","increment","startAt","finishAt","errorMessage","useRequestAnimationFrame","func","options","console","warn","opts","Object","assign","progress","onFinish","setOnFinish","next","window","requestAnimationFrame","step","current"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,wBAAP,MAAqC,mCAArC;AACA,MAAMC,cAAc,GAAG;AAAEC,EAAAA,SAAS,EAAE,CAAb;AAAgBC,EAAAA,OAAO,EAAE,CAAzB;AAA4BC,EAAAA,QAAQ,EAAE;AAAtC,CAAvB;AACA,MAAMC,YAAY,GAAG,4EACf,qGADe,GAEf,6DAFN;AAGA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAG,UAACC,IAAD,EAAoC;AAAA,MAA7BC,OAA6B,uEAAnBP,cAAmB;;AACjE,MAAI,CAACH,QAAD,IAAa,CAACC,cAAc,CAAC,uBAAD,CAAhC,EAA2D;AACvD;AACAU,IAAAA,OAAO,CAACC,IAAR,CAAaL,YAAb;AACA,WAAOL,wBAAwB,CAACK,YAAD,CAA/B;AACH;;AACD,QAAMM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,cAAlB,CAAd,EAAiDO,OAAjD,CAAb;AACA,QAAMM,QAAQ,GAAGlB,MAAM,CAACe,IAAI,CAACR,OAAN,CAAvB;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BnB,mBAAmB,EAAnD,CARiE,CASjE;;AACA,QAAMoB,IAAI,GAAG,MAAMC,MAAM,CAACC,qBAAP,CAA6BC,IAA7B,CAAnB;;AACA,QAAMA,IAAI,GAAGzB,WAAW,CAAC,MAAM;AAC3B,QAAImB,QAAQ,CAACO,OAAT,IAAoBV,IAAI,CAACP,QAAzB,IAAqCO,IAAI,CAACP,QAAL,KAAkB,CAAC,CAA5D,EAA+D;AAC3DG,MAAAA,IAAI,CAACO,QAAQ,CAACO,OAAV,EAAmBJ,IAAnB,CAAJ;AACAH,MAAAA,QAAQ,CAACO,OAAT,IAAoBV,IAAI,CAACT,SAAzB;AACH,KAHD,MAIK,IAAIa,QAAQ,CAACM,OAAb,EAAsB;AACvBN,MAAAA,QAAQ,CAACM,OAAT;AACH;AACJ,GARuB,EAQrB,CAACd,IAAD,EAAOI,IAAI,CAACP,QAAZ,EAAsBO,IAAI,CAACT,SAA3B,EAAsCY,QAAQ,CAACO,OAA/C,EAAwDN,QAAxD,CARqB,CAAxB;;AASA,MAAID,QAAQ,CAACO,OAAT,IAAoBV,IAAI,CAACR,OAA7B,EAAsC;AAClCc,IAAAA,IAAI;AACP;;AACD,SAAOD,WAAP;AACH,CAxBD;;AAyBA,eAAeV,wBAAf","sourcesContent":["import { useCallback, useRef } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport isClient from './shared/isClient';\nimport isAPISupported from './shared/isAPISupported';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nconst defaultOptions = { increment: 1, startAt: 0, finishAt: 100 };\nconst errorMessage = 'requestAnimationFrame is not supported, this could happen both because '\n    + 'window.requestAnimationFrame is not supported by your current browser version or you\\'re using the '\n    + 'useRequestAnimationFrame hook whilst server side rendering.';\n/**\n * Takes care of running an animating function, provided as the first argument, while keeping track of its progress.\n */\nconst useRequestAnimationFrame = (func, options = defaultOptions) => {\n    if (!isClient || !isAPISupported('requestAnimationFrame')) {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n        return createCbSetterErrorProxy(errorMessage);\n    }\n    const opts = Object.assign(Object.assign({}, defaultOptions), options);\n    const progress = useRef(opts.startAt);\n    const [onFinish, setOnFinish] = useHandlerSetterRef();\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const next = () => window.requestAnimationFrame(step);\n    const step = useCallback(() => {\n        if (progress.current <= opts.finishAt || opts.finishAt === -1) {\n            func(progress.current, next);\n            progress.current += opts.increment;\n        }\n        else if (onFinish.current) {\n            onFinish.current();\n        }\n    }, [func, opts.finishAt, opts.increment, progress.current, onFinish]);\n    if (progress.current <= opts.startAt) {\n        next();\n    }\n    return setOnFinish;\n};\nexport default useRequestAnimationFrame;\n"]},"metadata":{},"sourceType":"module"}