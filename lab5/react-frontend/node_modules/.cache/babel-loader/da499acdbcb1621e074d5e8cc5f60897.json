{"ast":null,"code":"import { useEffect } from 'react';\n\nconst assignEventOnMount = (targetRef, handler, eventName) => {\n  useEffect(() => {\n    const cb = mouseEvent => {\n      if (handler && handler.current) {\n        handler.current(mouseEvent);\n      }\n    };\n\n    let target;\n\n    if (targetRef !== null && !!targetRef.current) {\n      target = targetRef.current;\n    }\n\n    if (targetRef === null) {\n      target = document;\n    }\n\n    if (target && target.addEventListener) {\n      target.addEventListener(eventName, cb);\n    }\n\n    return () => {\n      if (target && target.removeEventListener) {\n        target.removeEventListener(eventName, cb);\n      }\n    };\n  }, []);\n};\n\nexport default assignEventOnMount;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/shared/assignEventOnMount.js"],"names":["useEffect","assignEventOnMount","targetRef","handler","eventName","cb","mouseEvent","current","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AACA,MAAMC,kBAAkB,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,KAAmC;AAC1DJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMK,EAAE,GAAIC,UAAD,IAAgB;AACvB,UAAIH,OAAO,IAAIA,OAAO,CAACI,OAAvB,EAAgC;AAC5BJ,QAAAA,OAAO,CAACI,OAAR,CAAgBD,UAAhB;AACH;AACJ,KAJD;;AAKA,QAAIE,MAAJ;;AACA,QAAIN,SAAS,KAAK,IAAd,IAAsB,CAAC,CAACA,SAAS,CAACK,OAAtC,EAA+C;AAC3CC,MAAAA,MAAM,GAAGN,SAAS,CAACK,OAAnB;AACH;;AACD,QAAIL,SAAS,KAAK,IAAlB,EAAwB;AACpBM,MAAAA,MAAM,GAAGC,QAAT;AACH;;AACD,QAAID,MAAM,IAAIA,MAAM,CAACE,gBAArB,EAAuC;AACnCF,MAAAA,MAAM,CAACE,gBAAP,CAAwBN,SAAxB,EAAmCC,EAAnC;AACH;;AACD,WAAO,MAAM;AACT,UAAIG,MAAM,IAAIA,MAAM,CAACG,mBAArB,EAA0C;AACtCH,QAAAA,MAAM,CAACG,mBAAP,CAA2BP,SAA3B,EAAsCC,EAAtC;AACH;AACJ,KAJD;AAKH,GArBQ,EAqBN,EArBM,CAAT;AAsBH,CAvBD;;AAwBA,eAAeJ,kBAAf","sourcesContent":["import { useEffect } from 'react';\nconst assignEventOnMount = (targetRef, handler, eventName) => {\n    useEffect(() => {\n        const cb = (mouseEvent) => {\n            if (handler && handler.current) {\n                handler.current(mouseEvent);\n            }\n        };\n        let target;\n        if (targetRef !== null && !!targetRef.current) {\n            target = targetRef.current;\n        }\n        if (targetRef === null) {\n            target = document;\n        }\n        if (target && target.addEventListener) {\n            target.addEventListener(eventName, cb);\n        }\n        return () => {\n            if (target && target.removeEventListener) {\n                target.removeEventListener(eventName, cb);\n            }\n        };\n    }, []);\n};\nexport default assignEventOnMount;\n"]},"metadata":{},"sourceType":"module"}