{"ast":null,"code":"import useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport assignEventOnMount from './shared/assignEventOnMount';\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n */\n\nconst useMouseEvents = function () {\n  let targetRef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  const [onMouseDownHandler, setOnMouseDown] = useHandlerSetterRef();\n  const [onMouseEnterHandler, setOnMouseEnter] = useHandlerSetterRef();\n  const [onMouseLeaveHandler, setOnMouseLeave] = useHandlerSetterRef();\n  const [onMouseMoveHandler, setOnMouseMove] = useHandlerSetterRef();\n  const [onMouseOutHandler, setOnMouseOut] = useHandlerSetterRef();\n  const [onMouseOverHandler, setOnMouseOver] = useHandlerSetterRef();\n  const [onMouseUpHandler, setOnMouseUp] = useHandlerSetterRef();\n\n  if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n    return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n  }\n\n  assignEventOnMount(targetRef, onMouseDownHandler, 'mousedown');\n  assignEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');\n  assignEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');\n  assignEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');\n  assignEventOnMount(targetRef, onMouseOutHandler, 'mouseout');\n  assignEventOnMount(targetRef, onMouseOverHandler, 'mouseover');\n  assignEventOnMount(targetRef, onMouseUpHandler, 'mouseup');\n  return Object.freeze({\n    onMouseDown: setOnMouseDown,\n    onMouseEnter: setOnMouseEnter,\n    onMouseLeave: setOnMouseLeave,\n    onMouseMove: setOnMouseMove,\n    onMouseOut: setOnMouseOut,\n    onMouseOver: setOnMouseOver,\n    onMouseUp: setOnMouseUp\n  });\n};\n\nexport default useMouseEvents;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useMouseEvents.js"],"names":["useHandlerSetterRef","createCbSetterErrorProxy","safeHasOwnProperty","assignEventOnMount","useMouseEvents","targetRef","onMouseDownHandler","setOnMouseDown","onMouseEnterHandler","setOnMouseEnter","onMouseLeaveHandler","setOnMouseLeave","onMouseMoveHandler","setOnMouseMove","onMouseOutHandler","setOnMouseOut","onMouseOverHandler","setOnMouseOver","onMouseUpHandler","setOnMouseUp","Object","freeze","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,wBAAP,MAAqC,mCAArC;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,YAAsB;AAAA,MAArBC,SAAqB,uEAAT,IAAS;AACzC,QAAM,CAACC,kBAAD,EAAqBC,cAArB,IAAuCP,mBAAmB,EAAhE;AACA,QAAM,CAACQ,mBAAD,EAAsBC,eAAtB,IAAyCT,mBAAmB,EAAlE;AACA,QAAM,CAACU,mBAAD,EAAsBC,eAAtB,IAAyCX,mBAAmB,EAAlE;AACA,QAAM,CAACY,kBAAD,EAAqBC,cAArB,IAAuCb,mBAAmB,EAAhE;AACA,QAAM,CAACc,iBAAD,EAAoBC,aAApB,IAAqCf,mBAAmB,EAA9D;AACA,QAAM,CAACgB,kBAAD,EAAqBC,cAArB,IAAuCjB,mBAAmB,EAAhE;AACA,QAAM,CAACkB,gBAAD,EAAmBC,YAAnB,IAAmCnB,mBAAmB,EAA5D;;AACA,MAAIK,SAAS,KAAK,IAAd,IAAsB,CAACH,kBAAkB,CAACG,SAAD,EAAY,SAAZ,CAA7C,EAAqE;AACjE,WAAOJ,wBAAwB,CAAC,mDAAD,CAA/B;AACH;;AACDE,EAAAA,kBAAkB,CAACE,SAAD,EAAYC,kBAAZ,EAAgC,WAAhC,CAAlB;AACAH,EAAAA,kBAAkB,CAACE,SAAD,EAAYG,mBAAZ,EAAiC,YAAjC,CAAlB;AACAL,EAAAA,kBAAkB,CAACE,SAAD,EAAYK,mBAAZ,EAAiC,YAAjC,CAAlB;AACAP,EAAAA,kBAAkB,CAACE,SAAD,EAAYO,kBAAZ,EAAgC,WAAhC,CAAlB;AACAT,EAAAA,kBAAkB,CAACE,SAAD,EAAYS,iBAAZ,EAA+B,UAA/B,CAAlB;AACAX,EAAAA,kBAAkB,CAACE,SAAD,EAAYW,kBAAZ,EAAgC,WAAhC,CAAlB;AACAb,EAAAA,kBAAkB,CAACE,SAAD,EAAYa,gBAAZ,EAA8B,SAA9B,CAAlB;AACA,SAAOE,MAAM,CAACC,MAAP,CAAc;AACjBC,IAAAA,WAAW,EAAEf,cADI;AAEjBgB,IAAAA,YAAY,EAAEd,eAFG;AAGjBe,IAAAA,YAAY,EAAEb,eAHG;AAIjBc,IAAAA,WAAW,EAAEZ,cAJI;AAKjBa,IAAAA,UAAU,EAAEX,aALK;AAMjBY,IAAAA,WAAW,EAAEV,cANI;AAOjBW,IAAAA,SAAS,EAAET;AAPM,GAAd,CAAP;AASH,CA3BD;;AA4BA,eAAef,cAAf","sourcesContent":["import useHandlerSetterRef from './shared/useHandlerSetterRef';\nimport createCbSetterErrorProxy from './shared/createCbSetterErrorProxy';\nimport safeHasOwnProperty from './shared/safeHasOwnProperty';\nimport assignEventOnMount from './shared/assignEventOnMount';\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n */\nconst useMouseEvents = (targetRef = null) => {\n    const [onMouseDownHandler, setOnMouseDown] = useHandlerSetterRef();\n    const [onMouseEnterHandler, setOnMouseEnter] = useHandlerSetterRef();\n    const [onMouseLeaveHandler, setOnMouseLeave] = useHandlerSetterRef();\n    const [onMouseMoveHandler, setOnMouseMove] = useHandlerSetterRef();\n    const [onMouseOutHandler, setOnMouseOut] = useHandlerSetterRef();\n    const [onMouseOverHandler, setOnMouseOver] = useHandlerSetterRef();\n    const [onMouseUpHandler, setOnMouseUp] = useHandlerSetterRef();\n    if (targetRef !== null && !safeHasOwnProperty(targetRef, 'current')) {\n        return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n    }\n    assignEventOnMount(targetRef, onMouseDownHandler, 'mousedown');\n    assignEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');\n    assignEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');\n    assignEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');\n    assignEventOnMount(targetRef, onMouseOutHandler, 'mouseout');\n    assignEventOnMount(targetRef, onMouseOverHandler, 'mouseover');\n    assignEventOnMount(targetRef, onMouseUpHandler, 'mouseup');\n    return Object.freeze({\n        onMouseDown: setOnMouseDown,\n        onMouseEnter: setOnMouseEnter,\n        onMouseLeave: setOnMouseLeave,\n        onMouseMove: setOnMouseMove,\n        onMouseOut: setOnMouseOut,\n        onMouseOver: setOnMouseOver,\n        onMouseUp: setOnMouseUp,\n    });\n};\nexport default useMouseEvents;\n"]},"metadata":{},"sourceType":"module"}