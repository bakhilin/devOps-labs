{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nconst defaultOptions = {\n  cancelOnUnmount: true\n};\n/**\n * An async-utility hook that accepts a callback function and a delay time (in milliseconds), then delays the\n * execution of the given function by the defined time.\n */\n\nconst useTimeout = function (fn, milliseconds) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOptions;\n  const opts = Object.assign(Object.assign({}, defaultOptions), options || {});\n  const timeout = useRef();\n  const callback = useRef(fn);\n  const [isCleared, setIsCleared] = useState(false); // the clear method\n\n  const clear = useCallback(() => {\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      setIsCleared(true);\n    }\n  }, []); // if the provided function changes, change its reference\n\n  useEffect(() => {\n    if (typeof fn === 'function') {\n      callback.current = fn;\n    }\n  }, [fn]); // when the milliseconds change, reset the timeout\n\n  useEffect(() => {\n    if (typeof milliseconds === 'number') {\n      timeout.current = setTimeout(() => {\n        callback.current();\n      }, milliseconds);\n    }\n\n    return clear;\n  }, [milliseconds]); // when component unmount clear the timeout\n\n  useEffect(() => () => {\n    if (opts.cancelOnUnmount) {\n      clear();\n    }\n  }, []);\n  return [isCleared, clear];\n};\n\nexport default useTimeout;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useTimeout.js"],"names":["useCallback","useEffect","useRef","useState","defaultOptions","cancelOnUnmount","useTimeout","fn","milliseconds","options","opts","Object","assign","timeout","callback","isCleared","setIsCleared","clear","current","clearTimeout","setTimeout"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,eAAe,EAAE;AADE,CAAvB;AAGA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,UAACC,EAAD,EAAKC,YAAL,EAAgD;AAAA,MAA7BC,OAA6B,uEAAnBL,cAAmB;AAC/D,QAAMM,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,cAAlB,CAAd,EAAkDK,OAAO,IAAI,EAA7D,CAAb;AACA,QAAMI,OAAO,GAAGX,MAAM,EAAtB;AACA,QAAMY,QAAQ,GAAGZ,MAAM,CAACK,EAAD,CAAvB;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C,CAJ+D,CAK/D;;AACA,QAAMc,KAAK,GAAGjB,WAAW,CAAC,MAAM;AAC5B,QAAIa,OAAO,CAACK,OAAZ,EAAqB;AACjBC,MAAAA,YAAY,CAACN,OAAO,CAACK,OAAT,CAAZ;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AACJ,GALwB,EAKtB,EALsB,CAAzB,CAN+D,CAY/D;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,OAAOM,EAAP,KAAc,UAAlB,EAA8B;AAC1BO,MAAAA,QAAQ,CAACI,OAAT,GAAmBX,EAAnB;AACH;AACJ,GAJQ,EAIN,CAACA,EAAD,CAJM,CAAT,CAb+D,CAkB/D;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,OAAOO,YAAP,KAAwB,QAA5B,EAAsC;AAClCK,MAAAA,OAAO,CAACK,OAAR,GAAkBE,UAAU,CAAC,MAAM;AAC/BN,QAAAA,QAAQ,CAACI,OAAT;AACH,OAF2B,EAEzBV,YAFyB,CAA5B;AAGH;;AACD,WAAOS,KAAP;AACH,GAPQ,EAON,CAACT,YAAD,CAPM,CAAT,CAnB+D,CA2B/D;;AACAP,EAAAA,SAAS,CAAC,MAAM,MAAM;AAClB,QAAIS,IAAI,CAACL,eAAT,EAA0B;AACtBY,MAAAA,KAAK;AACR;AACJ,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAO,CAACF,SAAD,EAAYE,KAAZ,CAAP;AACH,CAlCD;;AAmCA,eAAeX,UAAf","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nconst defaultOptions = {\n    cancelOnUnmount: true,\n};\n/**\n * An async-utility hook that accepts a callback function and a delay time (in milliseconds), then delays the\n * execution of the given function by the defined time.\n */\nconst useTimeout = (fn, milliseconds, options = defaultOptions) => {\n    const opts = Object.assign(Object.assign({}, defaultOptions), (options || {}));\n    const timeout = useRef();\n    const callback = useRef(fn);\n    const [isCleared, setIsCleared] = useState(false);\n    // the clear method\n    const clear = useCallback(() => {\n        if (timeout.current) {\n            clearTimeout(timeout.current);\n            setIsCleared(true);\n        }\n    }, []);\n    // if the provided function changes, change its reference\n    useEffect(() => {\n        if (typeof fn === 'function') {\n            callback.current = fn;\n        }\n    }, [fn]);\n    // when the milliseconds change, reset the timeout\n    useEffect(() => {\n        if (typeof milliseconds === 'number') {\n            timeout.current = setTimeout(() => {\n                callback.current();\n            }, milliseconds);\n        }\n        return clear;\n    }, [milliseconds]);\n    // when component unmount clear the timeout\n    useEffect(() => () => {\n        if (opts.cancelOnUnmount) {\n            clear();\n        }\n    }, []);\n    return [isCleared, clear];\n};\nexport default useTimeout;\n"]},"metadata":{},"sourceType":"module"}