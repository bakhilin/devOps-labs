{"ast":null,"code":"import { useEffect } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\n/**\n * Accepts an event name then returns a callback setter for a function to be performed when the event triggers.\n */\n\nconst useGlobalEvent = (eventName, fn, opts) => {\n  const [handler, setHandler] = useHandlerSetterRef(fn);\n  handler.current = fn;\n  useEffect(() => {\n    const cb = event => {\n      if (handler.current) {\n        handler.current(event);\n      }\n    };\n\n    if (handler && eventName) {\n      window.addEventListener(eventName, cb, opts);\n    }\n\n    return () => {\n      if (eventName) {\n        window.removeEventListener(eventName, cb, opts);\n      }\n    };\n  }, [eventName, opts]);\n  return setHandler;\n};\n\nexport default useGlobalEvent;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useGlobalEvent.js"],"names":["useEffect","useHandlerSetterRef","useGlobalEvent","eventName","fn","opts","handler","setHandler","current","cb","event","window","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACC,SAAD,EAAYC,EAAZ,EAAgBC,IAAhB,KAAyB;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,mBAAmB,CAACG,EAAD,CAAjD;AACAE,EAAAA,OAAO,CAACE,OAAR,GAAkBJ,EAAlB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,EAAE,GAAIC,KAAD,IAAW;AAClB,UAAIJ,OAAO,CAACE,OAAZ,EAAqB;AACjBF,QAAAA,OAAO,CAACE,OAAR,CAAgBE,KAAhB;AACH;AACJ,KAJD;;AAKA,QAAIJ,OAAO,IAAIH,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,CAACC,gBAAP,CAAwBT,SAAxB,EAAmCM,EAAnC,EAAuCJ,IAAvC;AACH;;AACD,WAAO,MAAM;AACT,UAAIF,SAAJ,EAAe;AACXQ,QAAAA,MAAM,CAACE,mBAAP,CAA2BV,SAA3B,EAAsCM,EAAtC,EAA0CJ,IAA1C;AACH;AACJ,KAJD;AAKH,GAdQ,EAcN,CAACF,SAAD,EAAYE,IAAZ,CAdM,CAAT;AAeA,SAAOE,UAAP;AACH,CAnBD;;AAoBA,eAAeL,cAAf","sourcesContent":["import { useEffect } from 'react';\nimport useHandlerSetterRef from './shared/useHandlerSetterRef';\n/**\n * Accepts an event name then returns a callback setter for a function to be performed when the event triggers.\n */\nconst useGlobalEvent = (eventName, fn, opts) => {\n    const [handler, setHandler] = useHandlerSetterRef(fn);\n    handler.current = fn;\n    useEffect(() => {\n        const cb = (event) => {\n            if (handler.current) {\n                handler.current(event);\n            }\n        };\n        if (handler && eventName) {\n            window.addEventListener(eventName, cb, opts);\n        }\n        return () => {\n            if (eventName) {\n                window.removeEventListener(eventName, cb, opts);\n            }\n        };\n    }, [eventName, opts]);\n    return setHandler;\n};\nexport default useGlobalEvent;\n"]},"metadata":{},"sourceType":"module"}