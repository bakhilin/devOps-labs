{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport useGeolocationEvents from './useGeolocationEvents';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\nimport makePositionObj from './shared/makePositionObject';\nimport isSamePosition from './shared/isSamePosition';\n/**\n * Returns a frozen object containing the `position` object, the `isSupported` boolean flag, reporting whether the\n * geolocation API is supported or not and the `isRetrieving` boolean flag reporting whether the hook is fetching the\n * current position.\n * The position is retrieved by using the\n * [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API),\n * when supported.<br/><br />\n * It possibly accepts an object of [geolocation options]\n * (https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) to be used as parameter when using the\n * `Geolocation.getCurrentPosition()` method.\n */\n\nconst useGeolocationState = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : geolocationStandardOptions;\n  const [position, setPosition] = useState(null);\n  const [isRetrieving, setRetrieving] = useState(false);\n  const {\n    isSupported,\n    onChange\n  } = useGeolocationEvents(options);\n  const savePosition = useCallback(() => {\n    if (position === null) {\n      setRetrieving(true);\n      navigator.geolocation.getCurrentPosition(nextPosition => {\n        if (!isSamePosition(position, nextPosition)) {\n          setPosition(makePositionObj(nextPosition));\n          setRetrieving(false);\n        }\n      });\n    }\n  }, [position]);\n  useEffect(savePosition, [position]);\n  onChange(savePosition);\n  return Object.freeze({\n    isSupported,\n    isRetrieving,\n    position\n  });\n};\n\nexport default useGeolocationState;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useGeolocationState.js"],"names":["useCallback","useEffect","useState","useGeolocationEvents","geolocationStandardOptions","makePositionObj","isSamePosition","useGeolocationState","options","position","setPosition","isRetrieving","setRetrieving","isSupported","onChange","savePosition","navigator","geolocation","getCurrentPosition","nextPosition","Object","freeze"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,0BAAP,MAAuC,qCAAvC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,YAA0C;AAAA,MAAzCC,OAAyC,uEAA/BJ,0BAA+B;AAClE,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACS,YAAD,EAAeC,aAAf,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAEW,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA4BX,oBAAoB,CAACK,OAAD,CAAtD;AACA,QAAMO,YAAY,GAAGf,WAAW,CAAC,MAAM;AACnC,QAAIS,QAAQ,KAAK,IAAjB,EAAuB;AACnBG,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAI,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,YAAD,IAAkB;AACvD,YAAI,CAACb,cAAc,CAACG,QAAD,EAAWU,YAAX,CAAnB,EAA6C;AACzCT,UAAAA,WAAW,CAACL,eAAe,CAACc,YAAD,CAAhB,CAAX;AACAP,UAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,OALD;AAMH;AACJ,GAV+B,EAU7B,CAACH,QAAD,CAV6B,CAAhC;AAWAR,EAAAA,SAAS,CAACc,YAAD,EAAe,CAACN,QAAD,CAAf,CAAT;AACAK,EAAAA,QAAQ,CAACC,YAAD,CAAR;AACA,SAAOK,MAAM,CAACC,MAAP,CAAc;AACjBR,IAAAA,WADiB;AAEjBF,IAAAA,YAFiB;AAGjBF,IAAAA;AAHiB,GAAd,CAAP;AAKH,CAtBD;;AAuBA,eAAeF,mBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport useGeolocationEvents from './useGeolocationEvents';\nimport geolocationStandardOptions from './shared/geolocationStandardOptions';\nimport makePositionObj from './shared/makePositionObject';\nimport isSamePosition from './shared/isSamePosition';\n/**\n * Returns a frozen object containing the `position` object, the `isSupported` boolean flag, reporting whether the\n * geolocation API is supported or not and the `isRetrieving` boolean flag reporting whether the hook is fetching the\n * current position.\n * The position is retrieved by using the\n * [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API),\n * when supported.<br/><br />\n * It possibly accepts an object of [geolocation options]\n * (https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions) to be used as parameter when using the\n * `Geolocation.getCurrentPosition()` method.\n */\nconst useGeolocationState = (options = geolocationStandardOptions) => {\n    const [position, setPosition] = useState(null);\n    const [isRetrieving, setRetrieving] = useState(false);\n    const { isSupported, onChange } = useGeolocationEvents(options);\n    const savePosition = useCallback(() => {\n        if (position === null) {\n            setRetrieving(true);\n            navigator.geolocation.getCurrentPosition((nextPosition) => {\n                if (!isSamePosition(position, nextPosition)) {\n                    setPosition(makePositionObj(nextPosition));\n                    setRetrieving(false);\n                }\n            });\n        }\n    }, [position]);\n    useEffect(savePosition, [position]);\n    onChange(savePosition);\n    return Object.freeze({\n        isSupported,\n        isRetrieving,\n        position,\n    });\n};\nexport default useGeolocationState;\n"]},"metadata":{},"sourceType":"module"}