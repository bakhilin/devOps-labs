{"ast":null,"code":"import { useLayoutEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isApiSupported from './shared/isAPISupported';\nimport isDevelopment from './shared/isDevelopment';\nconst defaultOptions = {\n  rootMargin: '0px',\n  threshold: 0\n};\nconst errorMessage = 'IntersectionObserver is not supported, this could happen both because' + ' window.IntersectionObserver is not supported by' + ' your current browser or you\\'re using the useViewportSpy hook whilst server side rendering.' + ' This message is displayed only in development mode';\n/**\n * Uses the IntersectionObserverMock API to tell whether the given DOM Element (from useRef) is visible within the\n * viewport.\n */\n\nconst useViewportSpy = function (elementRef) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n\n  if (!isClient || !isApiSupported('IntersectionObserver')) {\n    if (isDevelopment) {\n      // eslint-disable-next-line no-console\n      console.warn(errorMessage);\n    }\n\n    return null;\n  }\n\n  const [isVisible, setIsVisible] = useState();\n  useLayoutEffect(() => {\n    const observer = new window.IntersectionObserver(entries => entries.forEach(item => {\n      const nextValue = item.isIntersecting;\n      setIsVisible(nextValue);\n    }), options);\n    observer.observe(elementRef.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [elementRef]);\n  return isVisible;\n};\n\nexport default useViewportSpy;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/useViewportSpy.js"],"names":["useLayoutEffect","useState","isClient","isApiSupported","isDevelopment","defaultOptions","rootMargin","threshold","errorMessage","useViewportSpy","elementRef","options","console","warn","isVisible","setIsVisible","observer","window","IntersectionObserver","entries","forEach","item","nextValue","isIntersecting","observe","current","disconnect"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAAvB;AAIA,MAAMC,YAAY,GAAG,0EACf,kDADe,GAEf,8FAFe,GAGf,qDAHN;AAIA;AACA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG,UAACC,UAAD,EAA0C;AAAA,MAA7BC,OAA6B,uEAAnBN,cAAmB;;AAC7D,MAAI,CAACH,QAAD,IAAa,CAACC,cAAc,CAAC,sBAAD,CAAhC,EAA0D;AACtD,QAAIC,aAAJ,EAAmB;AACf;AACAQ,MAAAA,OAAO,CAACC,IAAR,CAAaL,YAAb;AACH;;AACD,WAAO,IAAP;AACH;;AACD,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,EAA1C;AACAD,EAAAA,eAAe,CAAC,MAAM;AAClB,UAAMgB,QAAQ,GAAG,IAAIC,MAAM,CAACC,oBAAX,CAAiCC,OAAD,IAAaA,OAAO,CAACC,OAAR,CAAiBC,IAAD,IAAU;AACpF,YAAMC,SAAS,GAAGD,IAAI,CAACE,cAAvB;AACAR,MAAAA,YAAY,CAACO,SAAD,CAAZ;AACH,KAH6D,CAA7C,EAGbX,OAHa,CAAjB;AAIAK,IAAAA,QAAQ,CAACQ,OAAT,CAAiBd,UAAU,CAACe,OAA5B;AACA,WAAO,MAAM;AACTT,MAAAA,QAAQ,CAACU,UAAT;AACH,KAFD;AAGH,GATc,EASZ,CAAChB,UAAD,CATY,CAAf;AAUA,SAAOI,SAAP;AACH,CApBD;;AAqBA,eAAeL,cAAf","sourcesContent":["import { useLayoutEffect, useState } from 'react';\nimport isClient from './shared/isClient';\nimport isApiSupported from './shared/isAPISupported';\nimport isDevelopment from './shared/isDevelopment';\nconst defaultOptions = {\n    rootMargin: '0px',\n    threshold: 0,\n};\nconst errorMessage = 'IntersectionObserver is not supported, this could happen both because'\n    + ' window.IntersectionObserver is not supported by'\n    + ' your current browser or you\\'re using the useViewportSpy hook whilst server side rendering.'\n    + ' This message is displayed only in development mode';\n/**\n * Uses the IntersectionObserverMock API to tell whether the given DOM Element (from useRef) is visible within the\n * viewport.\n */\nconst useViewportSpy = (elementRef, options = defaultOptions) => {\n    if (!isClient || !isApiSupported('IntersectionObserver')) {\n        if (isDevelopment) {\n            // eslint-disable-next-line no-console\n            console.warn(errorMessage);\n        }\n        return null;\n    }\n    const [isVisible, setIsVisible] = useState();\n    useLayoutEffect(() => {\n        const observer = new window.IntersectionObserver((entries) => entries.forEach((item) => {\n            const nextValue = item.isIntersecting;\n            setIsVisible(nextValue);\n        }), options);\n        observer.observe(elementRef.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [elementRef]);\n    return isVisible;\n};\nexport default useViewportSpy;\n"]},"metadata":{},"sourceType":"module"}