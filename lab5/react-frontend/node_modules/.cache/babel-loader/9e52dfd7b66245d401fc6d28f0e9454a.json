{"ast":null,"code":"import { useCallback, useRef } from 'react';\n/**\n * Returns an object where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.\n *\n * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),\n * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not force your component to re-render.**<br /><br />\n *\n * `useHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.\n */\n\nconst useHandlerSetterRef = handler => {\n  const handlerRef = useRef(handler);\n  const setHandler = useCallback(nextCallback => {\n    if (typeof nextCallback !== 'function') {\n      throw new Error('the argument supplied to the \\'setHandler\\' function should be of type function');\n    }\n\n    handlerRef.current = nextCallback;\n  }, [handlerRef.current]);\n  return [handlerRef, setHandler];\n};\n\nexport default useHandlerSetterRef;","map":{"version":3,"sources":["/home/nikita/Desktop/devOps-labs/lab5/react-frontend/node_modules/beautiful-react-hooks/esm/shared/useHandlerSetterRef.js"],"names":["useCallback","useRef","useHandlerSetterRef","handler","handlerRef","setHandler","nextCallback","Error","current"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACrC,QAAMC,UAAU,GAAGH,MAAM,CAACE,OAAD,CAAzB;AACA,QAAME,UAAU,GAAGL,WAAW,CAAEM,YAAD,IAAkB;AAC7C,QAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AACpC,YAAM,IAAIC,KAAJ,CAAU,iFAAV,CAAN;AACH;;AACDH,IAAAA,UAAU,CAACI,OAAX,GAAqBF,YAArB;AACH,GAL6B,EAK3B,CAACF,UAAU,CAACI,OAAZ,CAL2B,CAA9B;AAMA,SAAO,CAACJ,UAAD,EAAaC,UAAb,CAAP;AACH,CATD;;AAUA,eAAeH,mBAAf","sourcesContent":["import { useCallback, useRef } from 'react';\n/**\n * Returns an object where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.\n *\n * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),\n * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not force your component to re-render.**<br /><br />\n *\n * `useHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.\n */\nconst useHandlerSetterRef = (handler) => {\n    const handlerRef = useRef(handler);\n    const setHandler = useCallback((nextCallback) => {\n        if (typeof nextCallback !== 'function') {\n            throw new Error('the argument supplied to the \\'setHandler\\' function should be of type function');\n        }\n        handlerRef.current = nextCallback;\n    }, [handlerRef.current]);\n    return [handlerRef, setHandler];\n};\nexport default useHandlerSetterRef;\n"]},"metadata":{},"sourceType":"module"}